#from sys import exit

def get_scholar_citations():
    """

    :return:
    """
    citations = []
    for k in range(2):
        url = ('https://scholar.google.com/citations?hl=en&user=Jo0G0c0AAAAJ&cstart=' +
               str(k*100) + '&pagesize=100')
        print(url)
        print()
        response = requests.get(url)
        soup = BeautifulSoup(response.content, 'lxml')

        table = soup.find('tbody')
        for i, child in enumerate(table.children):
            title = child.find('a', {'class': 'gsc_a_at'})
            cites = child.find('a', {'class': 'gsc_a_ac'}) # Not cites have code &nbsp;
            year = child.find('span', {'class': 'gs_oph'})

            citations.append({'Title': title.text.encode('utf-8'), 'Year': year.text.strip(', '),
                              'Scholar_cites': cites.text.encode('utf-8')})

    return citations


def my_index(my_list, my_key, target):
    for i, item in enumerate(my_list):
        if item[my_key] == target:
            return i

    return None

def get_altmetric_score(res, paper_impact):


    return


def match_ids(key, i, data, impact):
    """
    Match paper_id from publications and impact Json files

    :param key: str
    :param i: int
    :param data: dict
    :param impact: dict

    :return: update_lag, index: datetime.timedelta, int
    """
    #
    paper_id = data[key][i]['Paper_id']

    exists_in_impact = False
    for j in range(len(impact[key])):
        if impact[key][j]['Paper_id'] == paper_id:
            index = j
            exists_in_impact = True
            break

    # Create if it does not exist
    if not exists_in_impact:
        index = -1
        impact[key].append({})
        impact[key][-1]['Paper_id'] = paper_id
        impact[key][-1]['Alt_score'] = False
        impact[key][-1]['Sc_score'] = False
        impact[key][-1]['Update_date'] = None

    else: # Fix possible mistakes
        if impact[key][index]['Alt_score'] == '-':
            paper['Alt_score'] = False
        if impact[key][index]['Sc_cites'] == '-':
            paper['Sc_score'] = False

    # Check date of last update
    date_tuple = impact[key][index]['Update_date']
    if date_tuple != None:
        last_date = date(date_tuple[0], date_tuple[1], date_tuple[2]-1)
        update_lag = date.today() - last_date
    else:
        update_lag = timedelta(days = 500)

    return update_lag, index